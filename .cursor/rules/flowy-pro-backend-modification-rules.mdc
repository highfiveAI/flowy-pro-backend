---
description: 
globs: 
alwaysApply: true
---
# Flowy Pro Backend 코드 수정 규칙

## 프로젝트 전반적인 프로세스

### 1. 핵심 워크플로우
```
유저 음성 업로드 → STT → text 추출 → 에이전트들에게 전송 → 각 에이전트 처리 (요약/피드백/웹서치/역할분배) → DB 저장
```

### 2. 주요 컴포넌트
- **STT 처리**: [app/services/stt.py](mdc:app/services/stt.py) - Whisper API를 통한 음성-텍스트 변환
- **에이전트 오케스트레이션**: [app/services/tagging.py](mdc:app/services/tagging.py) - 각 에이전트 호출 및 조율
- **백그라운드 작업**: [app/api/v1/endpoints/speech_to_text.py](mdc:app/api/v1/endpoints/speech_to_text.py) - 비동기 처리
- **개별 에이전트들**:
  - 요약: [app/services/lang_summary.py](mdc:app/services/lang_summary.py)
  - 피드백: [app/services/lang_feedback.py](mdc:app/services/lang_feedback.py)
  - 할일 추출: [app/services/lang_todo.py](mdc:app/services/lang_todo.py)
  - 역할 분배: [app/services/lang_role.py](mdc:app/services/lang_role.py)
  - 문서 검색: [app/services/orchestration.py](mdc:app/services/orchestration.py)

## 현재 문제점 및 에러 상황

### 🚨 주요 문제: BackgroundTask 에러
**위치**: `text 추출 → 에이전트들에게 전송` 단계
**원인**: 최근 비동기 처리에서 BackgroundTask로 변경 후 간헐적 에러 발생

### 확인된 에러 패턴
1. **OpenAI API 호출 에러**:
   ```
   object ChatCompletion can't be used in 'await' expression
   ```
   - 위치: [app/services/stt.py](mdc:app/services/stt.py) `gpt_refine_text` 함수

2. **파일 형식 에러**:
   ```
   Unrecognized file format. Supported formats: ['flac', 'm4a', 'mp3', ...]
   ```
   - 위치: [app/services/stt.py](mdc:app/services/stt.py) `transcribe_chunk` 함수

3. **에이전트 호출 에러**:
   ```
   [tag_chunks] 에이전트 호출 오류
   ```
   - 위치: [app/services/tagging.py](mdc:app/services/tagging.py) line 151

## 코드 수정 시 필수 확인 사항

### 1. 비동기 처리 관련
- **AsyncOpenAI 클라이언트 사용 확인**: `openai.AsyncOpenAI` 사용 여부
- **await 표현식 검증**: ChatCompletion 객체에 직접 await 사용 금지
- **DB 세션 관리**: AsyncSession 올바른 전달 및 종료 확인
- **BackgroundTask 내 예외 처리**: try-catch 블록으로 전체 작업 감싸기

### 2. STT 처리 관련
- **파일 형식 검증**: 업로드 전 지원 형식 확인
- **임시 파일 정리**: 처리 완료 후 temp 파일 삭제 확인
- **청크 분할 오류**: 오디오 파일 크기 및 형식 검증

### 3. 에이전트 호출 관련
- **순차 의존성 확인**: 
  ```python
  # 올바른 순서
  stt_result → tag_chunks_async → 개별 에이전트들 → DB 저장
  ```
- **에이전트 간 데이터 전달**: chunks, attendees_list, sentence_scores 올바른 전달
- **JSON 파싱 안전성**: 모든 에이전트 응답에 대한 예외 처리

### 4. DB 저장 관련
- **트랜잭션 관리**: 에러 발생 시 rollback 처리
- **외래키 관계**: meeting_id, user_id 등 관계 무결성 확인
- **캘린더 동기화**: task_assign_log → calendar 연동 확인

## 디버깅 체크리스트

### BackgroundTask 에러 발생 시
1. **로그 확인 위치**:
   ```python
   print(f"[BackgroundTask] 전체 분석 작업 중 오류: {e}", flush=True)
   ```

2. **단계별 확인**:
   - [ ] STT 변환 성공 여부
   - [ ] chunks 생성 확인
   - [ ] 각 에이전트 개별 호출 성공
   - [ ] DB 저장 과정 확인
   - [ ] 임시 파일 정리 완료

3. **에러 복구 전략**:
   - 부분적 성공 시 저장된 데이터 유지
   - 에러 로그를 통한 재시도 지점 파악
   - 사용자에게 명확한 에러 메시지 제공

### 성능 최적화 고려사항
- **병렬 처리**: 에이전트 호출 시 가능한 경우 병렬 실행
- **타임아웃 설정**: OpenAI API 호출에 적절한 타임아웃
- **리소스 관리**: 메모리 사용량 모니터링 (특히 대용량 오디오 파일)

