"""create user table

Revision ID: d755ec763b81
Revises: 9274de23b67b
Create Date: 2025-06-02 15:08:53.751540

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'd755ec763b81'
down_revision: Union[str, None] = '9274de23b67b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # # ### commands auto generated by Alembic - please adjust! ###
    # op.drop_index(op.f('idx_stored_filename'), table_name='documentss')
    # op.drop_index(op.f('idx_upload_date'), table_name='documentss')
    # op.drop_index(op.f('idx_user_id'), table_name='documentss')
    # op.drop_table('documentss')
    # op.drop_table('test')
    # op.drop_index(op.f('roles_vector_idx'), table_name='roless', postgresql_using='ivfflat')
    # op.drop_table('roless')
    # op.drop_table('users')
    # op.drop_table('test2')
    # op.drop_index(op.f('docs_vector_idx'), table_name='docs', postgresql_using='ivfflat')
    # op.drop_table('docs')
    # op.drop_table('langchain_pg_collection')
    # op.drop_table('langchain_pg_embedding')
    # # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('langchain_pg_embedding',
    sa.Column('collection_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('embedding', sa.NullType(), autoincrement=False, nullable=True),
    sa.Column('document', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('cmetadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('custom_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['collection_id'], ['langchain_pg_collection.uuid'], name=op.f('langchain_pg_embedding_collection_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uuid', name=op.f('langchain_pg_embedding_pkey'))
    )
    op.create_table('langchain_pg_collection',
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('cmetadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('uuid', name=op.f('langchain_pg_collection_pkey'))
    )
    op.create_table('docs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('docs_title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('docs_loc', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('docs_content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('docs_vector', sa.NullType(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('docs_pkey'))
    )
    op.create_index(op.f('docs_vector_idx'), 'docs', ['docs_vector'], unique=False, postgresql_using='ivfflat')
    op.create_table('test2',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('content', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('embedding', sa.NullType(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('test2_pk'))
    )
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('username', name='users_username_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('roless',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('role_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('role_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('role_vector', sa.NullType(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('roles_pkey'))
    )
    op.create_index(op.f('roles_vector_idx'), 'roless', ['role_vector'], unique=False, postgresql_using='ivfflat')
    op.create_table('test',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('test_pk'))
    )
    op.create_table('documentss',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('original_filename', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('stored_filename', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('s3_key', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('s3_bucket', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('file_size', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('content_type', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('upload_date', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('last_accessed', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('embedding_data', sa.NullType(), autoincrement=False, nullable=True),
    sa.Column('content_text', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('documents_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('documents_pkey')),
    sa.UniqueConstraint('stored_filename', name=op.f('documents_stored_filename_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_user_id'), 'documentss', ['user_id'], unique=False)
    op.create_index(op.f('idx_upload_date'), 'documentss', ['upload_date'], unique=False)
    op.create_index(op.f('idx_stored_filename'), 'documentss', ['stored_filename'], unique=False)
    # ### end Alembic commands ###
