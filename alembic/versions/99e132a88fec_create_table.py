"""create table

Revision ID: 99e132a88fec
Revises: 363c44f9db3e
Create Date: 2025-06-13 23:22:44.360336

"""
from typing import Sequence, Union

from alembic import op
from pgvector.sqlalchemy import Vector
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '99e132a88fec'
down_revision: Union[str, None] = '363c44f9db3e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('prompt_log',
    sa.Column('prompt_id', sa.UUID(), nullable=False),
    sa.Column('prompt_meeting_id', sa.UUID(), nullable=False),
    sa.Column('agent_type', sa.Enum('search', 'summary', 'docs', name='agent_type_enum'), nullable=False),
    sa.Column('prompt_output', sa.Text(), nullable=False),
    sa.Column('prompt_input_date', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('prompt_output_date', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['prompt_meeting_id'], ['meeting.meeting_id'], ),
    sa.PrimaryKeyConstraint('prompt_id')
    )

    op.add_column('company_position', sa.Column('position_company_id', sa.UUID(), nullable=False))
    op.create_foreign_key(None, 'company_position', 'company', ['position_company_id'], ['company_id'])
    op.drop_column('feedbacktype', 'feedback_detail')
    op.add_column('flowy_user', sa.Column('user_login_type', sa.String(length=20), nullable=False))
    op.alter_column('interdocs', 'interdocs_vector',
               existing_type=Vector(1536),
               type_=Vector(512),
               existing_nullable=False)
    op.drop_column('meeting', 'meeting_audio_type')
    op.alter_column('signup_log', 'signup_completed_status',
               existing_type=sa.BOOLEAN(),
               type_=sa.String(length=20),
               existing_nullable=False)
    op.alter_column('summary_log', 'meeting_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('task_assign_log', 'meeting_id',
               existing_type=sa.UUID(),
               nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('task_assign_log', 'meeting_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('summary_log', 'meeting_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('signup_log', 'signup_completed_status',
               existing_type=sa.String(length=20),
               type_=sa.BOOLEAN(),
               existing_nullable=False)
    op.add_column('meeting', sa.Column('meeting_audio_type', sa.VARCHAR(length=30), autoincrement=False, nullable=False))
    op.alter_column('interdocs', 'interdocs_vector',
               existing_type=Vector(512),
               type_=Vector(1536),
               existing_nullable=False)
    op.drop_column('flowy_user', 'user_login_type')
    op.add_column('feedbacktype', sa.Column('feedback_detail', sa.TEXT(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'company_position', type_='foreignkey')
    op.drop_column('company_position', 'position_company_id')
    op.create_table('langchain_pg_embedding',
    sa.Column('collection_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('embedding', Vector(None), autoincrement=False, nullable=True),
    sa.Column('document', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('cmetadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('custom_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['collection_id'], ['langchain_pg_collection.uuid'], name=op.f('langchain_pg_embedding_collection_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uuid', name=op.f('langchain_pg_embedding_pkey'))
    )
    op.create_table('langchain_pg_collection',
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('cmetadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('uuid', name=op.f('langchain_pg_collection_pkey'))
    )
    op.drop_table('prompt_log')
    # ### end Alembic commands ###
