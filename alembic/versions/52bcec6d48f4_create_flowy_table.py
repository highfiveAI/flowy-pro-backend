"""create flowy table

Revision ID: 52bcec6d48f4
Revises: 9e75a2185d0b
Create Date: 2025-06-02 18:10:10.771182

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '52bcec6d48f4'
down_revision: Union[str, None] = '9e75a2185d0b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('feedbacktype',
    sa.Column('feedbacktype_id', sa.UUID(), nullable=False),
    sa.Column('feedbacktype_name', sa.String(length=100), nullable=False),
    sa.Column('feedback_detail', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('feedbacktype_id')
    )
    op.create_table('draft_log',
    sa.Column('draft_id', sa.UUID(), nullable=False),
    sa.Column('meeting_id', sa.UUID(), nullable=True),
    sa.Column('draft_trigger', sa.Text(), nullable=False),
    sa.Column('docs_source_type', sa.Enum('internal', 'external', name='docs_source_type'), nullable=True),
    sa.Column('ref_interdoc_id', sa.UUID(), nullable=True),
    sa.Column('ref_external_link', sa.Text(), nullable=True),
    sa.Column('draft_title', sa.String(length=100), nullable=True),
    sa.Column('draft_url', sa.Text(), nullable=True),
    sa.Column('draft_ref_reason', sa.Text(), nullable=False),
    sa.Column('draft_created_date', sa.TIMESTAMP(), nullable=False),
    sa.ForeignKeyConstraint(['meeting_id'], ['meeting.meeting_id'], ),
    sa.PrimaryKeyConstraint('draft_id')
    )
    op.create_table('feedback',
    sa.Column('feedback_id', sa.UUID(), nullable=False),
    sa.Column('meeting_id', sa.UUID(), nullable=False),
    sa.Column('feedbacktype_id', sa.UUID(), nullable=False),
    sa.Column('feedback_detail', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('feedback_created_date', sa.TIMESTAMP(), nullable=False),
    sa.ForeignKeyConstraint(['feedbacktype_id'], ['feedbacktype.feedbacktype_id'], ),
    sa.ForeignKeyConstraint(['meeting_id'], ['meeting.meeting_id'], ),
    sa.PrimaryKeyConstraint('feedback_id')
    )
    # op.drop_table('langchain_pg_collection')
    # op.drop_table('langchain_pg_embedding')
    # op.drop_table('test')
    # op.drop_table('test2')
    # op.drop_index(op.f('ix_documents_id'), table_name='documents')
    # op.drop_table('documents')
    # op.drop_table('users')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('username', name='users_username_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('documents',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('original_filename', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('stored_filename', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('s3_key', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('s3_bucket', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('file_size', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('content_type', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('upload_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_accessed', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('documents_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('documents_pkey')),
    sa.UniqueConstraint('stored_filename', name=op.f('documents_stored_filename_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_documents_id'), 'documents', ['id'], unique=False)
    op.create_table('test2',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('content', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('test2_pk'))
    )
    op.create_table('test',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('test_pk'))
    )
    op.create_table('langchain_pg_embedding',
    sa.Column('collection_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(), autoincrement=False, nullable=True),
    sa.Column('document', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('cmetadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('custom_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['collection_id'], ['langchain_pg_collection.uuid'], name=op.f('langchain_pg_embedding_collection_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uuid', name=op.f('langchain_pg_embedding_pkey'))
    )
    op.create_table('langchain_pg_collection',
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('cmetadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('uuid', name=op.f('langchain_pg_collection_pkey'))
    )
    op.drop_table('feedback')
    op.drop_table('draft_log')
    op.drop_table('feedbacktype')
    # ### end Alembic commands ###
