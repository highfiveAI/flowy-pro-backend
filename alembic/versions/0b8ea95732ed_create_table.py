"""create table

Revision ID: 0b8ea95732ed
Revises: 67a801745926
Create Date: 2025-06-02 17:07:53.543394

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '0b8ea95732ed'
down_revision: Union[str, None] = '67a801745926'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('company',
    sa.Column('company_id', sa.UUID(), nullable=False),
    sa.Column('company_name', sa.String(length=150), nullable=False),
    sa.Column('company_scale', sa.String(length=100), nullable=True),
    sa.Column('service_startdate', sa.TIMESTAMP(), nullable=True),
    sa.Column('service_enddate', sa.TIMESTAMP(), nullable=True),
    sa.Column('service_status', sa.BOOLEAN(), nullable=False),
    sa.PrimaryKeyConstraint('company_id')
    )
    op.create_table('admin',
    sa.Column('admin_id', sa.UUID(), nullable=False),
    sa.Column('admin_company_id', sa.UUID(), nullable=False),
    sa.Column('admin_sysrole_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['admin_company_id'], ['company.company_id'], ),
    sa.ForeignKeyConstraint(['admin_sysrole_id'], ['sysrole.sysrole_id'], ),
    sa.PrimaryKeyConstraint('admin_id')
    )
    # op.drop_index(op.f('ix_documents_id'), table_name='documents')
    # op.drop_table('documents')
    # op.drop_table('test')
    # op.drop_table('langchain_pg_embedding')
    # op.drop_table('test2')
    # op.drop_table('users')
    # op.drop_table('langchain_pg_collection')
    op.alter_column('flowy_user', 'user_company_id',
               existing_type=sa.VARCHAR(length=36),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('flowy_user', 'user_sysrole_id',
               existing_type=sa.VARCHAR(length=36),
               type_=sa.UUID(),
               existing_nullable=False)
    op.create_foreign_key(None, 'flowy_user', 'company', ['user_company_id'], ['company_id'])
    op.create_foreign_key(None, 'flowy_user', 'sysrole', ['user_sysrole_id'], ['sysrole_id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'flowy_user', type_='foreignkey')
    op.drop_constraint(None, 'flowy_user', type_='foreignkey')
    op.alter_column('flowy_user', 'user_sysrole_id',
               existing_type=sa.UUID(),
               type_=sa.VARCHAR(length=36),
               existing_nullable=False)
    op.alter_column('flowy_user', 'user_company_id',
               existing_type=sa.UUID(),
               type_=sa.VARCHAR(length=36),
               existing_nullable=False)
    op.create_table('langchain_pg_collection',
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('cmetadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('uuid', name='langchain_pg_collection_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('username', name='users_username_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('test2',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('content', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('test2_pk'))
    )
    op.create_table('langchain_pg_embedding',
    sa.Column('collection_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(), autoincrement=False, nullable=True),
    sa.Column('document', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('cmetadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('custom_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['collection_id'], ['langchain_pg_collection.uuid'], name=op.f('langchain_pg_embedding_collection_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uuid', name=op.f('langchain_pg_embedding_pkey'))
    )
    op.create_table('test',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('test_pk'))
    )
    op.create_table('documents',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('original_filename', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('stored_filename', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('s3_key', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('s3_bucket', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('file_size', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('content_type', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('upload_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_accessed', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('documents_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('documents_pkey')),
    sa.UniqueConstraint('stored_filename', name=op.f('documents_stored_filename_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_documents_id'), 'documents', ['id'], unique=False)
    op.drop_table('admin')
    op.drop_table('company')
    # ### end Alembic commands ###
