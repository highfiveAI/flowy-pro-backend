"""create table

Revision ID: 88dc99983f8f
Revises: facc52c53631
Create Date: 2025-06-10 10:21:32.213717

"""
from typing import Sequence, Union

from alembic import op
from pgvector.sqlalchemy import Vector
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '88dc99983f8f'
down_revision: Union[str, None] = 'facc52c53631'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # op.drop_table('langchain_pg_embedding')
    # op.drop_table('langchain_pg_collection')
     # 1. nullable=True로 우선 추가
    op.add_column('company_position', sa.Column('position_company_id', postgresql.UUID(), nullable=True))
    # 2. 더미 UUID 넣기 (모든 기존 row에)
    op.execute("""
        UPDATE company_position SET position_company_id = 'cc83051e-71dd-49a6-ae5a-c643ed280065'
    """)
    # 3. NOT NULL로 제약 바꾸기
    op.alter_column('company_position', 'position_company_id', nullable=False)
    op.create_foreign_key(None, 'company_position', 'company', ['position_company_id'], ['company_id'])
     # 1단계: 기본값을 주고 컬럼 추가 (기존 데이터에 null이 생기지 않도록)
    op.add_column('flowy_user', sa.Column('user_login_type', sa.String(length=20), nullable=True))

    # 2단계: 기본값으로 기존 행 업데이트
    op.execute("UPDATE flowy_user SET user_login_type = 'general' WHERE user_login_type IS NULL")

    # 3단계: NOT NULL 제약 추가
    op.alter_column('flowy_user', 'user_login_type', nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('flowy_user', 'user_login_type')
    op.drop_constraint(None, 'company_position', type_='foreignkey')
    op.drop_column('company_position', 'position_company_id')
    # op.create_table('langchain_pg_collection',
    # sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    # sa.Column('cmetadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    # sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False),
    # sa.PrimaryKeyConstraint('uuid', name='langchain_pg_collection_pkey'),
    # postgresql_ignore_search_path=False
    # )
    # op.create_table('langchain_pg_embedding',
    # sa.Column('collection_id', sa.UUID(), autoincrement=False, nullable=True),
    # sa.Column('embedding', Vector(None), autoincrement=False, nullable=True),
    # sa.Column('document', sa.VARCHAR(), autoincrement=False, nullable=True),
    # sa.Column('cmetadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    # sa.Column('custom_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    # sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False),
    # sa.ForeignKeyConstraint(['collection_id'], ['langchain_pg_collection.uuid'], name=op.f('langchain_pg_embedding_collection_id_fkey'), ondelete='CASCADE'),
    # sa.PrimaryKeyConstraint('uuid', name=op.f('langchain_pg_embedding_pkey'))
    # )
    # ### end Alembic commands ###
